#!/usr/bin/env ruby

#
#------------------------------------------------------------------------------
# "THE BEER-WARE LICENSE" (Revision 42):
# <mayeu.tik@gmail.com> wrote this file. As long as you retain this notice you
# can do whatever you want with this stuff. If we meet some day, and you think
# this stuff is worth it, you can buy me a beer in return. Matthieu Maury
#------------------------------------------------------------------------------
#

require 'trollop'
require 'parseconfig'

require_relative '../lib/swatch'

# ###############
# Global variable
# ###############

CONF_FILE = File.expand_path("~/.swatchrc")
VERSION = '0.3'

if File.exist? CONF_FILE
  config = ParseConfig.new(CONF_FILE)
  TRACK_FILE = File.expand_path config.get_value 'track_file' 
  TODO_FILE = File.expand_path config.get_value 'todo_file' 
else
  TRACK_FILE = File.expand_path("~/.swatch.txt")
  TODO_FILE = File.expand_path("~/.todo.txt")
end

# #####################
# Subcommand definition
# #####################

SUB_COMMANDS = %w(in i out o what w report r)
global_opts = Trollop::options do
  version VERSION
  banner <<-EOS
Swatch, a command line utility to track the time you spend.
  swatch [-hv] <command> <command options> <command arg> 

You can have detailled instruction on a command with:
  swatch -h <command>

          in, i:   launch the time tracker
                   swatch in "task"
         out, o:   stop the current running task
                   swatch out
        what, w:   print the current task on stdout
                   swatch what
  EOS
  stop_on SUB_COMMANDS
end

cmd = ARGV.shift # get the subcommand
cmd_opts = case cmd
           when "in", "i"
             Trollop::options do
               opt :todo, "Track a todo.txt task", :type => :int, :short => "-t"
             end
           when "out", "o"
           when "what" || "w"
           when "report" || "r"
           end

#puts "Global options: #{global_opts.inspect}"
#puts "Subcommand: #{cmd.inspect}"
#puts "Subcommand options: #{cmd_opts.inspect}"
#puts "Remaining arguments: #{ARGV.inspect}"

# Now we have the arg. So, what do we do ?

case cmd
when "in", "i"
  unless cmd_opts[:todo]
    Swatch::task_in ARGV.join(" ").chomp
  else
    Swatch::task_in_todo cmd_opts[:todo]
  end
when "out", "o"
  Swatch::task_out
when "what" || "w"
when "report" || "r"
end
